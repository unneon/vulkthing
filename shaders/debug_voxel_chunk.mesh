#version 460

#extension GL_EXT_mesh_shader : require
#extension GL_EXT_shader_8bit_storage : require
#extension GL_EXT_shader_16bit_storage : require
#extension GL_EXT_shader_explicit_arithmetic_types_int8 : require
#extension GL_EXT_shader_explicit_arithmetic_types_int16 : require

#include "types/uniform.glsl"
#include "types/voxel.glsl"

layout(binding = 0) uniform GLOBAL_UNIFORM_TYPE global;
layout(binding = 4) readonly buffer Meshlets {
    VoxelMeshlet meshlets[];
};

#define VERTEX_COUNT 8
#define TRIANGLE_COUNT 6

layout(local_size_x = 12, local_size_y = 1, local_size_z = 1) in;
layout(triangles, max_vertices = VERTEX_COUNT, max_primitives = TRIANGLE_COUNT) out;

const u8vec3 INDICES[TRIANGLE_COUNT] = u8vec3[](
    u8vec3(0, 1, 2),
    u8vec3(1, 3, 2),
    u8vec3(0, 4, 1),
    u8vec3(1, 4, 5),
    u8vec3(0, 2, 4),
    u8vec3(2, 6, 4)
    // u8vec3(, , )
    // u8vec3(, , )
    // u8vec3(, , )
    // u8vec3(, , )
    // u8vec3(, , )
    // u8vec3(, , )
);

const vec3 VERTICES[VERTEX_COUNT] = vec3[](
    vec3(0, 0, 0),
    vec3(0, 1, 0),
    vec3(1, 0, 0),
    vec3(1, 1, 0),
    vec3(0, 0, 1),
    vec3(0, 1, 1),
    vec3(1, 0, 1),
    vec3(1, 1, 1)
);

void main() {
    SetMeshOutputsEXT(VERTEX_COUNT, TRIANGLE_COUNT);
    VoxelMeshlet meshlet = meshlets[global.debug.meshlet_id];

    if (gl_LocalInvocationID.x < TRIANGLE_COUNT) {
        gl_PrimitiveTriangleIndicesEXT[gl_LocalInvocationID.x] = INDICES[gl_LocalInvocationID.x];
    }

    if (gl_LocalInvocationID.x < VERTEX_COUNT) {
        vec3 world_space = global.voxels.chunk_size * (vec3(meshlet.chunk) + VERTICES[gl_LocalInvocationID.x]);
        vec4 clip_space = global.camera.projection_matrix * global.camera.view_matrix * vec4(world_space, 1);
        gl_MeshVerticesEXT[gl_LocalInvocationID.x].gl_Position = clip_space;
    }
}
