#version 460

#extension GL_EXT_mesh_shader : require
#extension GL_EXT_shader_8bit_storage : require
#extension GL_EXT_shader_16bit_storage : require
#extension GL_EXT_shader_explicit_arithmetic_types_int8 : require
#extension GL_EXT_shader_explicit_arithmetic_types_int16 : require

#include "types/uniform.glsl"
#include "types/voxel.glsl"
#include "util/geometry.glsl"

layout(binding = 0) uniform GLOBAL_UNIFORM_TYPE global;
layout(binding = 4) readonly buffer Meshlets {
    VoxelMeshlet meshlets[];
};

layout(local_size_x = 4, local_size_y = 1, local_size_z = 1) in;
layout(lines, max_vertices = 4, max_primitives = 4) out;

const uvec2 INDICES[4] = uvec2[](
    uvec2(0, 1),
    uvec2(0, 2),
    uvec2(1, 3),
    uvec2(2, 3)
);

const vec2 VERTICES[4] = vec2[](
    vec2(0, 0),
    vec2(0, 1),
    vec2(1, 0),
    vec2(1, 1)
);

void main() {
    VoxelMeshlet meshlet = meshlets[global.debug.meshlet_id];
    vec3 world_space_min = global.voxels.chunk_size * vec3(meshlet.chunk) + meshlet.bound_base;
    vec3 world_space_max = world_space_min + meshlet.bound_size;
    vec4 screen_aabb;
    if (screen_aabb_projection(world_space_min, world_space_max, global.camera.depth_near, global.camera.projection_matrix * global.camera.view_matrix, screen_aabb)) {
        SetMeshOutputsEXT(4, 4);
        gl_PrimitiveLineIndicesEXT[gl_LocalInvocationID.x] = INDICES[gl_LocalInvocationID.x];
        gl_MeshVerticesEXT[gl_LocalInvocationID.x].gl_Position = vec4(screen_aabb.xy + (screen_aabb.zw - screen_aabb.xy) * VERTICES[gl_LocalInvocationID.x], 0, 1);
    } else {
        SetMeshOutputsEXT(0, 0);
    }
}
