#version 460

#extension GL_EXT_mesh_shader : require
#extension GL_EXT_shader_8bit_storage : require

#include "types/uniform.glsl"

layout(binding = 0) uniform GLOBAL_UNIFORM_TYPE global;
layout(binding = 2) readonly buffer Vertices {
    VoxelVertex vertices[];
};
layout(binding = 3) readonly buffer Indices {
    uint8_t indices[];
};
layout(binding = 4) readonly buffer Meshlets {
    VoxelMeshlet meshlets[];
};

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;
layout(triangles, max_vertices = 128, max_primitives = 256) out;

layout(location = 0) out vec3 frag_position[];
layout(location = 1) perprimitiveEXT out vec3 frag_color[];

#include "util/oklab.glsl"

vec3 color_from_index(uint index) {
    float lightness = 0.6 + 0.4 * (index * 2971 % 256) / 255.0;
    float chroma = 0.6 + 0.4 * (index * 1933 % 256) / 255.0;
    float hue = 2 * acos(-1) * (index * 907 % 256) / 255.0;
    return srgb_from_oklab(oklab_from_oklch(vec3(lightness, chroma, hue)));
}

void main() {
    VoxelMeshlet meshlet = meshlets[gl_WorkGroupID.x];
    uint triangle_count = meshlet.triangle_count / 3;
    SetMeshOutputsEXT(meshlet.vertex_count, triangle_count);

    if (gl_LocalInvocationID.x < triangle_count) {
        gl_PrimitiveTriangleIndicesEXT[gl_LocalInvocationID.x] = uvec3(
            indices[meshlet.triangle_offset + 3 * gl_LocalInvocationID.x],
            indices[meshlet.triangle_offset + 3 * gl_LocalInvocationID.x + 1],
            indices[meshlet.triangle_offset + 3 * gl_LocalInvocationID.x + 2]
        );
        vec3 work_group_color = color_from_index(gl_WorkGroupID.x);
        vec3 local_invocation_color = color_from_index(gl_LocalInvocationID.x);
        vec3 color = 0.97 * work_group_color + 0.03 * local_invocation_color;
        frag_color[gl_LocalInvocationID.x] = color;
    }

    if (gl_LocalInvocationID.x < meshlet.vertex_count) {
        VoxelVertex vertex = vertices[meshlet.vertex_offset + gl_LocalInvocationID.x];
        vec4 world_space = vec4(vertex.position.xyz, 1);
        vec4 clip_space = global.camera.projection_matrix * global.camera.view_matrix * world_space;
        gl_MeshVerticesEXT[gl_LocalInvocationID.x].gl_Position = clip_space;
        frag_position[gl_LocalInvocationID.x] = world_space.xyz;
    }
}
